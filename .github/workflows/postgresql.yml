on:
  workflow_dispatch:
  workflow_call:

jobs:
  get-versions:
    uses: ./.github/workflows/manifest.yml
    with:
      config-path: manifest.json

  build-postgresql:
    needs: get-versions

    strategy:
      fail-fast: false
      matrix:
        version: ${{ fromJSON(env.POSTGRESQL_VERSIONS) }}

    runs-on: windows-latest

    # -m enables parallelism
    # verbosity:minimal + Summary reduce verbosity, while keeping a summary of
    #   errors/warnings
    # ForceNoAlign prevents msbuild from introducing line-breaks for long lines
    # disable file tracker, we're never going to rebuild, and it slows down the
    #   build
    env:
      MSBFLAGS: -m -verbosity:minimal "-consoleLoggerParameters:Summary;ForceNoAlign" /p:TrackFileAccess=false -nologo
      POSTGRESQL_VERSIONS: ${{needs.get-versions.outputs.POSTGRESQL_VERSIONS}}
    steps:
      - uses: ilammy/msvc-dev-cmd@v1

      - name: Download dependencies
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: all-deps.yml
          workflow_conclusion: success
          name: all-deps-win64
          path: /builddeps
          if_no_artifact_found: fail

      # Copy libraries requires at runtime to installation directory.
      #
      # Do so before configuring / building postgres, otherwise we need to
      # duplicate knowledge about aberrant paths like "bin64".
      - name: Install Dependencies
        run: |
          mkdir \postgresql
          mkdir \postgresql\bin

          copy \builddeps\bin64\icuuc*.dll \postgresql\bin\
          copy \builddeps\bin64\icudt*.dll \postgresql\bin\
          copy \builddeps\bin64\icuin*.dll \postgresql\bin\
          copy \builddeps\bin\libiconv-2.dll \postgresql\bin\
          copy \builddeps\bin\libintl-8.dll \postgresql\bin\
          copy \builddeps\bin\libxml2.dll \postgresql\bin\
          copy \builddeps\bin\libxslt.dll \postgresql\bin\
          copy \builddeps\bin\libssl-*-x64.dll \postgresql\bin\
          copy \builddeps\bin\libcrypto-*-x64.dll \postgresql\bin\
          copy \builddeps\bin\liblz4.dll \postgresql\bin\
          copy \builddeps\bin\libzstd.dll \postgresql\bin\
          copy \builddeps\bin\zlib1.dll \postgresql\bin\

      - name: Add build deps to path
        run: |
          # so binaries and libraries can be found/run
          echo "/builddeps/bin" >> $ENV:GITHUB_PATH
          echo "/builddeps" >> $ENV:GITHUB_PATH
          echo "/postgresql/bin" >> $ENV:GITHUB_PATH

      - name: Download
        run: |
          curl https://ftp.postgresql.org/pub/source/v${{ matrix.version }}/postgresql-${{ matrix.version }}.tar.gz -o ./postgresql-${{ matrix.version }}.tar.gz
          tar zxvf postgresql-${{ matrix.version }}.tar.gz

      - name: Configure
        run: |
          cd postgresql-${{ matrix.version }}\src\tools\msvc

          >> config.pl echo # Configuration arguments for vcbuild.
          >> config.pl echo use strict;
          >> config.pl echo use warnings;
          >> config.pl echo.
          >> config.pl echo our $config = {
          >> config.pl echo 	asserts   =^> 0,        # --enable-cassert
          >> config.pl echo 	ldap      =^> 1,        # --with-ldap
          >> config.pl echo 	extraver  =^> undef,    # --with-extra-version=^<string^>
          >> config.pl echo 	gss       =^> undef,    # --with-gssapi=^<path^>
          >> config.pl echo 	icu       =^> '\builddeps',    # --with-icu=^<path^>
          >> config.pl echo 	lz4       =^> '\builddeps',    # --with-lz4=^<path^>
          >> config.pl echo 	zstd      =^> '\builddeps',    # --with-zstd=^<path^>
          >> config.pl echo 	nls       =^> '\builddeps',    # --enable-nls=^<path^>
          >> config.pl echo 	tap_tests =^> 1,    # --enable-tap-tests
          >> config.pl echo 	tcl       =^> undef,    # --with-tcl=^<path^>
          >> config.pl echo 	perl      =^> undef,    # --with-perl
          >> config.pl echo 	python    =^> undef,    # --with-python=^<path^>
          >> config.pl echo 	openssl   =^> '\builddeps',    # --with-openssl=^<path^>
          >> config.pl echo 	uuid      =^> '\builddeps',    # --with-ossp-uuid
          >> config.pl echo 	xml       =^> '\builddeps',    # --with-libxml=^<path^>
          >> config.pl echo 	xslt      =^> '\builddeps',    # --with-libxslt=^<path^>
          >> config.pl echo 	iconv     =^> '\builddeps',    # (not in configure, path to iconv)
          >> config.pl echo 	zlib      =^> '\builddeps'     # --with-zlib=^<path^>
          >> config.pl echo };
          >> config.pl echo.
          >> config.pl echo 1;
        shell: cmd

      - name: Build
        run: |
          cd postgresql-${{ matrix.version }}\src\tools\msvc
          build
        shell: cmd

      - name: Test
        run: |
          cd postgresql-${{ matrix.version }}\src\tools\msvc
          vcregress check
        shell: cmd

      - name: Install
        run: |
          cd postgresql-${{ matrix.version }}\src\tools\msvc

          perl install.pl \postgresql
        shell: cmd

      - name: Upload Source
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: postgresql-${{ matrix.version }}-src
          path: postgresql-${{ matrix.version }}.tar.gz

      - name: Upload Config
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: postgresql-${{ matrix.version }}-config
          path: |
            postgresql-${{ matrix.version }}/src/tools/msvc/config.pl
            postgresql-${{ matrix.version }}/src/tools/msvc/buildenv.pl

      - name: Upload Binaries
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: postgresql-${{ matrix.version }}-win64
          path: /postgresql
